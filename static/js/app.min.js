(function(){
  const btn = document.getElementById('backToTopBtn');
  const toggle = ()=>btn.style.display = window.scrollY>400?'flex':'none';
  window.addEventListener('scroll',toggle,{passive:true});
  btn.addEventListener('click',()=>window.scrollTo({top:0,behavior:'smooth'}));
})();

/* ---------------------------------------------------------
   Header behaviour — vanilla port of React logic
--------------------------------------------------------- */
(() => {
  const header       = document.getElementById("siteHeader");
  const progressBar  = document.getElementById("scrollProgress");
  const menuToggle   = document.getElementById("menuToggle");
  const mobileNav    = document.getElementById("mobileNav");
  const themeToggle  = document.getElementById("themeToggle");
  const ghostBadge   = document.getElementById("ghostBadge");

  /* ---------- theme persistence ---------- */
  const applyTheme = t =>
    document.documentElement.classList.toggle("dark", t === "dark");

  let theme = localStorage.getItem("theme") || "dark";
  applyTheme(theme);
  themeToggle.textContent = theme === "dark" ? "☀️" : "🌙";

  themeToggle.addEventListener("click", () => {
    theme = theme === "dark" ? "light" : "dark";
    applyTheme(theme);
    localStorage.setItem("theme", theme);
    themeToggle.textContent = theme === "dark" ? "☀️" : "🌙";
  });

  /* ---------- scroll progress + hide-on-scroll ---------- */
  let last = 0;
  window.addEventListener("scroll", () => {
    const max   = document.body.scrollHeight - innerHeight;
    const ratio = Math.min(1, scrollY / max);
    progressBar.style.transform = `scaleX(${ratio})`;

    header.style.transform =
      scrollY > last && scrollY > 100 ? "translateY(-80px)"
                                      : "translateY(0)";
    last = scrollY;
  });

  /* ---------- mobile menu ---------- */
  menuToggle.addEventListener("click", () => {
    const open = mobileNav.classList.toggle("hidden");
    menuToggle.textContent = open ? "✕" : "☰";
    menuToggle.setAttribute("aria-expanded", open);
  });

  /* ---------- ghost-mode easter egg ("g" then "h") ---------- */
  const keys = [];
  window.addEventListener("keydown", e => {
    keys.push(e.key.toLowerCase());
    keys.splice(0, keys.length - 2);
    if (keys.join("") === "gh") {
      ghostBadge.classList.remove("hidden");
      setTimeout(() => ghostBadge.classList.add("hidden"), 4000);
      keys.length = 0;
    }
  });
})();

(function(){
  const badge = document.getElementById('ghostModeBadge');
  const seq=[];                   // track last 2 keys
  document.addEventListener('keydown',e=>{
    seq.push(e.key.toLowerCase()); if(seq.length>2)seq.shift();
    if(seq.join('')==='gh'){ badge.classList.remove('hidden');
      setTimeout(()=>badge.classList.add('hidden'),4000);}
  });
})();

/* search.js  – mirrors the old React hook */
export class SearchWorker {
  constructor(reports) {
    this.ready = false;
    this.w = new Worker("/js/search.worker.js");
    this.w.onmessage = ({ data }) => {
      if (data.type === "READY") this.ready = true;
    };
    this.w.postMessage({ type: "INDEX", reports });
  }

  /** returns Promise<Report[]> */
  query(q) {
    return new Promise((resolve) => {
      if (!this.w) return resolve([]);
      const handler = ({ data }) => {
        if (data.type === "RESULTS") {
          this.w.removeEventListener("message", handler);
          resolve(data.results.map((r) => r.doc));
        }
      };
      this.w.addEventListener("message", handler);
      this.w.postMessage({ type: "QUERY", q });
    });
  }

  destroy() {
    this.w?.terminate();
    this.w = null;
  }
}

/* search.worker.js  – tiny Fuse.js-powered full-text search in a Web Worker */
importScripts("https://cdn.jsdelivr.net/npm/fuse.js@7.0.0/dist/fuse.js");

let fuse;

self.onmessage = (e) => {
  const { type, reports, q } = e.data;

  if (type === "INDEX") {
    fuse = new Fuse(reports, {
      keys: ["title", "tags", "summary"],
      includeScore: true,
      threshold: 0.4,
    });
    self.postMessage({ type: "READY" });
  }

  if (type === "QUERY") {
    if (!fuse) return self.postMessage({ type: "RESULTS", results: [] });
    const res = q ? fuse.search(q).slice(0, 20) : [];
    self.postMessage({ type: "RESULTS", results: res });
  }
};

/*  vault-utils.js  – lightweight client helpers
    Everything attaches to window.Vault so any page can call
    Vault.getCvssColor(7.8)  etc.
    Inject window.ALL_REPORTS in the page template so the
    helpers have data to work with.
*/

(() => {
  const COLORS = [
    "#f97316","#e879f9","#38bdf8","#34d399","#facc15",
    "#a855f7","#22d3ee","#c084fc","#fb923c","#4ade80"
  ];

  /* ─────────────── CVSS helpers ─────────────── */
  function getCvssColor(score){
    if(score>=9)  return "text-red-400";
    if(score>=7)  return "text-orange-400";
    if(score>=4)  return "text-yellow-400";
    return "text-emerald-400";
  }
  function getCvssLabel(score){
    if(score>=9)  return "Critical";
    if(score>=7)  return "High";
    if(score>=4)  return "Medium";
    return "Low";
  }

  /* ─────────────── data helpers ─────────────── */
  const R = () => window.ALL_REPORTS || [];

  function filterReportsByTag(tag){
    return tag==="All" ? R() : R().filter(r=>r.tags.includes(tag));
  }
  function sortReports(list,key){
    const sev = ["Low","Medium","High","Critical"];
    return [...list].sort((a,b)=>{
      if(key==="date")    return new Date(b.date)-new Date(a.date);
      if(key==="cvss")    return b.cvss-a.cvss;
      if(key==="severity")return sev.indexOf(b.severity)-sev.indexOf(a.severity);
      return 0;
    });
  }
  function getAllTags(){
    return Array.from(new Set(R().flatMap(r=>r.tags))).sort();
  }

  /* ─────────────── chart helpers ─────────────── */
  function getSeverityRadarData(){
    const map={}; R().forEach(r=>map[r.severity]=(map[r.severity]||0)+1);
    return Object.entries(map).map(([s,c])=>({severity:s,count:c}));
  }
  function getCvssByYear(){
    const map={}; R().forEach(r=>{
      const y=new Date(r.date).getFullYear();
      (map[y]=map[y]||[]).push(r.cvss);
    });
    return Object.entries(map).map(([y,arr])=>({
      year:+y,
      cvss:+(arr.reduce((a,b)=>a+b,0)/arr.length).toFixed(1)
    }));
  }
  function getMonthlyReportTrends(){
    const map={}; R().forEach(r=>{
      const k=new Date(r.date).toISOString().slice(0,7);
      map[k]=(map[k]||0)+1;
    });
    return Object.entries(map).map(([m,c])=>({month:m,count:c}));
  }

  /* ─────────────── shimmer SVG helper ─────────────── */
  function shimmer(w,h){
    return `
    <svg width="${w}" height="${h}" xmlns="http://www.w3.org/2000/svg">
      <defs><linearGradient id="g">
        <stop stop-color="#333" offset="20%"/>
        <stop stop-color="#222" offset="50%"/>
        <stop stop-color="#333" offset="70%"/>
      </linearGradient></defs>
      <rect width="${w}" height="${h}" fill="#333"/>
      <rect id="r" width="${w}" height="${h}" fill="url(#g)">
        <animate attributeName="x" from="-${w}" to="${w}"
                 dur="1s" repeatCount="indefinite"/>
      </rect>
    </svg>`;
  }

  /* expose */
  window.Vault = {
    COLORS, getCvssColor, getCvssLabel,
    filterReportsByTag, sortReports, getAllTags,
    getSeverityRadarData, getCvssByYear, getMonthlyReportTrends,
    shimmer
  };
})();