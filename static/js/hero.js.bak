document.addEventListener('DOMContentLoaded', () => {
  const heroEl     = document.getElementById('hero');
  const canvas     = document.getElementById('heroStarfield');
  const typerEl    = document.getElementById('heroTyper');
  const haloEl     = document.getElementById('heroHalo');
  const sparksEl   = document.getElementById('ghostSparks');
  const ghostMsgEl = document.getElementById('ghostMsg');
  const searchBtn  = document.getElementById('searchBtn');
  const searchInput= document.getElementById('globalSearch');
  let starfieldRan = false;

  if (!heroEl) return;

  // ─── 0️⃣ Warp-in entrance ───────────────────────────────────────────
  heroEl.classList.add('opacity-0');
  requestAnimationFrame(() => {
    heroEl.classList.remove('opacity-0');
    heroEl.classList.add('animate-warpStabilize');
  });

  // ─── 1️⃣ STARFIELD FX ────────────────────────────────────────────────
  const initStarfield = () => {
  if (!canvas || !canvas.getContext) return;

  const ctx = canvas.getContext('2d');
  let stars = [];
  let animationFrame;

  const resize = () => {
    canvas.width = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;

    const numStars = Math.floor((canvas.width * canvas.height) / 8000);
    stars = Array.from({ length: numStars }, () => ({
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height,
      r: Math.random() * 1.2 + 0.3,
      alpha: Math.random(),
      delta: Math.random() * 0.02 + 0.005,
    }));
  };

  const draw = () => {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    stars.forEach(star => {
      star.alpha += star.delta;
      if (star.alpha <= 0 || star.alpha >= 1) star.delta *= -1;

      ctx.globalAlpha = star.alpha;
      ctx.beginPath();
      ctx.arc(star.x, star.y, star.r, 0, 2 * Math.PI);
      ctx.fillStyle = '#ffffff';
      ctx.fill();
    });

    ctx.globalAlpha = 1;
    animationFrame = requestAnimationFrame(draw);
  };

  resize();
  draw();
  window.addEventListener('resize', resize);

  return () => {
    cancelAnimationFrame(animationFrame);
    window.removeEventListener('resize', resize);
  };
};

  // ─── 2️⃣ TYPEWRITER EFFECT ──────────────────────────────────────────
  if (typerEl) {
    const phrases = [
      '🔐 Zero-Day Archive Updating…',
      '💀 Ghosted but not gone.',
      '🛰️ Live Vault Feed: Stable.',
      '⚡ Stay Dangerous, Operative.'
    ];
    let idx = 0;

    const showNext = () => {
      typerEl.textContent = phrases[idx];
      typerEl.classList.remove('animate-typewriter');
      void typerEl.offsetWidth;
      typerEl.classList.add('animate-typewriter');
      idx = (idx + 1) % phrases.length;
    };

    showNext();
    setInterval(showNext, 4000);
  }

  // ─── 3️⃣ GHOST MODE FX ──────────────────────────────────────────────
  const ghostMode = document.body.dataset.ghostMode === 'true';
  if (ghostMode) {
    haloEl?.classList.add('opacity-100', 'animate-pulse');

    if (sparksEl) {
      sparksEl.classList.remove('hidden');
      setInterval(() => {
        const s = document.createElement('div');
        s.className = 'spark';
        s.style.left = `${Math.random() * 100}%`;
        s.style.top = `${Math.random() * 100}%`;
        s.style.animationDuration = `${2 + Math.random() * 2}s`;
        sparksEl.appendChild(s);
        setTimeout(() => s.remove(), 4000);
      }, 300);
    }

    ghostMsgEl?.classList.remove('hidden');
  }

  // ─── 4️⃣ CMD+K GLOBAL SEARCH ────────────────────────────────────────
  if (searchBtn && searchInput) {
    searchBtn.addEventListener('click', () => searchInput.focus());
    document.addEventListener('keydown', e => {
      if ((e.metaKey || e.ctrlKey) && e.key.toLowerCase() === 'k') {
        e.preventDefault();
        searchInput.focus();
      }
    });
  }
});

